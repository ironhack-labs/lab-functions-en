{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Functions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On this lab we will put to practice some of the concepts we have learned on this past few days.\n",
    "\n",
    "`NOTE: On this lab you should try to write all the functions yourself using only the most basic of python syntax and without functions such as len, count, sum, max, min, in, etc. Give it a try. 🧑🏻‍💻👩🏻‍💻`\n",
    "\n",
    "The cell after each exercise contains a few tests to check if your function works as expected."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from mod.testing import *\n",
    "import unittest"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Write a function that returns the greater of two numbers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [],
   "source": [
    "def greater(a, b):\n",
    "    if a > b:\n",
    "        return a\n",
    "    else:\n",
    "        return b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [],
   "source": [
    "def test_greater(greater):\n",
    "    assert greater(10, 5) == 10, \"Test Case 1 Failed\"\n",
    "    assert greater(3, 8) == 8, \"Test Case 2 Failed\"\n",
    "    assert greater(7, 7) == 7, \"Test Case 3 Failed\"\n",
    "    assert greater(-1, -5) == -1, \"Test Case 4 Failed\"\n",
    "    print(\"All test cases passed!\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "All test cases passed!\n"
     ]
    }
   ],
   "source": [
    "def greater(a, b):\n",
    "    #your code here\n",
    "    if a > b:\n",
    "        return a\n",
    "    else:\n",
    "        return b\n",
    "\n",
    "def test_greater(greater):\n",
    "    assert greater(10, 5) == 10, \"Test Case 1 Failed\"\n",
    "    assert greater(3, 8) == 8, \"Test Case 2 Failed\"\n",
    "    assert greater(7, 7) == 7, \"Test Case 3 Failed\"\n",
    "    assert greater(-1, -5) == -1, \"Test Case 4 Failed\"\n",
    "    print(\"All test cases passed!\")\n",
    "    \n",
    "# Call the test function\n",
    "test_greater(greater)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Now write a function that returns the largest element on a list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [],
   "source": [
    "def greatest(lst):\n",
    "    return max(lst)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "All test cases passed!\n"
     ]
    }
   ],
   "source": [
    "def test_greatest(greatest):\n",
    "    assert greatest([1, 2, 3, 4, 5]) == 5, \"Test Case 1 Failed\"\n",
    "    assert greatest([-1, -2, -3, -4, -5]) == -1, \"Test Case 2 Failed\"\n",
    "    assert greatest([100, 0, 25, 80]) == 100, \"Test Case 3 Failed\"\n",
    "    assert greatest([7, 7, 7, 7]) == 7, \"Test Case 4 Failed\"\n",
    "    assert greatest([3]) == 3, \"Test Case 5 Failed\"\n",
    "    print(\"All test cases passed!\")\n",
    "\n",
    "# Call the test function\n",
    "test_greatest(greatest)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Write a function that sums all the elements on a list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [],
   "source": [
    "def sum_all(lst):\n",
    "    return sum(lst)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "All test cases passed!\n"
     ]
    }
   ],
   "source": [
    "def sum_all(lst):\n",
    "    #your code here\n",
    "    return sum(lst)\n",
    "\n",
    "def test_sum(sum_all):\n",
    "    assert sum_all([1, 2, 3, 4, 5]) == 15, \"Test Case 1 Failed\"\n",
    "    assert sum_all([10, 20, 30]) == 60, \"Test Case 2 Failed\"\n",
    "    assert sum_all([-1, -2, -3]) == -6, \"Test Case 3 Failed\"\n",
    "    assert sum_all([0, 0, 0]) == 0, \"Test Case 4 Failed\"\n",
    "    assert sum_all([100]) == 100, \"Test Case 5 Failed\"\n",
    "    print(\"All test cases passed!\")\n",
    "\n",
    "# Call the test function\n",
    "test_sum(sum_all)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Write another function that multiplies all the elements on a list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def mult_all(lst):\n",
    "    result = 1\n",
    "    for num in lst:\n",
    "        result *= num\n",
    "    return result\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "All test cases passed!\n"
     ]
    }
   ],
   "source": [
    "def mult_all(lst):\n",
    "    #your code here\n",
    "    result = 1\n",
    "    for num in lst:\n",
    "        result *= num\n",
    "    return result\n",
    "\n",
    "def test_mult(mult_all):\n",
    "    assert mult_all([1, 2, 3, 4, 5]) == 120, \"Test Case 1 Failed\"\n",
    "    assert mult_all([2, 3, 5]) == 30, \"Test Case 2 Failed\"\n",
    "    assert mult_all([1, 1, 1]) == 1, \"Test Case 3 Failed\"\n",
    "    assert mult_all([-1, 2, -3]) == 6, \"Test Case 4 Failed\"\n",
    "    assert mult_all([10]) == 10, \"Test Case 5 Failed\"\n",
    "    assert mult_all([0, 1, 2]) == 0, \"Test Case 6 Failed\"\n",
    "    print(\"All test cases passed!\")\n",
    "    \n",
    " # This will test your function \n",
    "test_mult(mult_all)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Now combine those two ideas and write a function that receives a list and either \"+\" or \"*\" and outputs acordingly"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def oper_all(arr, oper = \"*\"):\n",
    "    if oper == \"+\":\n",
    "        return sum(arr)\n",
    "    elif oper == \"*\":\n",
    "        result = 1\n",
    "        for num in arr:\n",
    "            result *= num\n",
    "        return result\n",
    "    else:\n",
    "        return \"Invalid operation! Use '+' or '*'\"\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# This will test your function \n",
    "test_operations(oper_all)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6. Write a function that returns the factorial of a number."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def factorial(n):\n",
    "    if n == 0 or n == 1:\n",
    "        return 1\n",
    "    else:\n",
    "        result = 1\n",
    "        for i in range(2, n + 1):\n",
    "            result *= i\n",
    "        return result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "120\n",
      "720\n",
      "1\n"
     ]
    }
   ],
   "source": [
    "def factorial(n):\n",
    "    result = 1\n",
    "    for i in range(1, n + 1):\n",
    "        result *= i   \n",
    "    return result\n",
    "print(factorial(5))  # Expected output: 120\n",
    "print(factorial(6))  # Expected output: 720\n",
    "print(factorial(0))  # Expected output: 1 (by definition)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "All test cases passed!\n"
     ]
    }
   ],
   "source": [
    "def factorial(n):\n",
    "    result = 1\n",
    "    for i in range(1, n + 1):\n",
    "        result *= i \n",
    "    \n",
    "    return result\n",
    "\n",
    "def test_factorial(factorial):\n",
    "    assert factorial(5) == 120, \"Test Case 1 Failed\"\n",
    "    assert factorial(6) == 720, \"Test Case 2 Failed\"\n",
    "    assert factorial(0) == 1, \"Test Case 3 Failed\"\n",
    "    assert factorial(1) == 1, \"Test Case 4 Failed\"\n",
    "    assert factorial(7) == 5040, \"Test Case 5 Failed\"\n",
    "    print(\"All test cases passed!\")\n",
    "\n",
    "# This will test your function \n",
    "test_factorial(factorial)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 7. Write a function that takes a list and returns a list of the unique values.\n",
    "\n",
    "`NOTE: You cannot use set. 🤔`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {},
   "outputs": [],
   "source": [
    "def unique(lst_un):\n",
    "    unique_list = []\n",
    "    for item in lst_un:\n",
    "        if item not in unique_list:\n",
    "            unique_list.append(item)\n",
    "    \n",
    "    return unique_list\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "All test cases passed!\n"
     ]
    }
   ],
   "source": [
    "def test_unique(unique):\n",
    "    assert unique([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], \"Test Case 1 Failed\"\n",
    "    assert unique([1, 2, 2, 3, 3, 4]) == [1, 2, 3, 4], \"Test Case 2 Failed\"\n",
    "    assert unique([5, 5, 5, 5, 5]) == [5], \"Test Case 3 Failed\"\n",
    "    assert unique([10, 20, 20, 30, 40, 10]) == [10, 20, 30, 40], \"Test Case 4 Failed\"\n",
    "    assert unique([]) == [], \"Test Case 5 Failed\"\n",
    "    print(\"All test cases passed!\")\n",
    "\n",
    "# This will test your function\n",
    "test_unique(unique)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 8. Write a function that returns the mode of a list, i.e.: the element that appears the most times.\n",
    "`NOTE: You should not use count... 🧐`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "def mode_counter(arr):\n",
    "    unique_values = list(set(arr))\n",
    "    return unique_values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 4, 5]\n",
      "[10]\n",
      "[1, 2, 3, 4, 5]\n",
      "['orange', 1, 'apple']\n",
      "[]\n"
     ]
    }
   ],
   "source": [
    " # This will test your function \n",
    "test_mode(mode_counter)\n",
    "# Test function\n",
    "def test_mode(func):\n",
    "    # Test case 1: A list with duplicates\n",
    "    arr1 = [1, 2, 2, 3, 4, 4, 5]\n",
    "    print(func(arr1))  # Expected Output: [1, 2, 3, 4, 5] (order may vary)\n",
    "\n",
    "    # Test case 2: A list with only one unique value\n",
    "    arr2 = [10, 10, 10, 10]\n",
    "    print(func(arr2))  # Expected Output: [10]\n",
    "    \n",
    "    # Test case 3: A list with no duplicates\n",
    "    arr3 = [1, 2, 3, 4, 5]\n",
    "    print(func(arr3))  # Expected Output: [1, 2, 3, 4, 5]\n",
    "\n",
    "    # Test case 4: A list with mixed data types\n",
    "    arr4 = [1, \"apple\", 1, \"orange\", \"apple\"]\n",
    "    print(func(arr4))  # Expected Output: [1, \"apple\", \"orange\"] (order may vary)\n",
    "\n",
    "    # Test case 5: An empty list\n",
    "    arr5 = []\n",
    "    print(func(arr5))  # Expected Output: []"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 9. Write a function that calculates the standard deviation of a list.\n",
    "`NOTE: Do not use any libraries or already built functions. 😉`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [],
   "source": [
    "def st_dev(list_sd):\n",
    "    \n",
    "    mean = sum(list_sd) / len(list_sd)\n",
    "    squared_diffs = 0\n",
    "    for num in list_sd:\n",
    "        squared_diffs += (num - mean) ** 2\n",
    "    \n",
    "\n",
    "    variance = squared_diffs / (len(list_sd) - 1)\n",
    "    \n",
    "    return variance ** 0.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "st_dev([10, 12, 23, 23, 16, 23, 21, 16]) = 5.237229365663817, expected = 4.898979485566356\n"
     ]
    },
    {
     "ename": "AssertionError",
     "evalue": "Test failed for [10, 12, 23, 23, 16, 23, 21, 16]",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAssertionError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[134], line 14\u001b[0m\n\u001b[0;32m     11\u001b[0m         \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mst_dev(\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mlst\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m) = \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mresult\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m, expected = \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mexpected\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m     12\u001b[0m         \u001b[38;5;28;01massert\u001b[39;00m \u001b[38;5;28mround\u001b[39m(result, \u001b[38;5;241m6\u001b[39m) \u001b[38;5;241m==\u001b[39m \u001b[38;5;28mround\u001b[39m(expected, \u001b[38;5;241m6\u001b[39m), \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mTest failed for \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mlst\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m---> 14\u001b[0m test_stdev(st_dev)\n",
      "Cell \u001b[1;32mIn[134], line 12\u001b[0m, in \u001b[0;36mtest_stdev\u001b[1;34m(st_dev)\u001b[0m\n\u001b[0;32m     10\u001b[0m result \u001b[38;5;241m=\u001b[39m st_dev(lst)\n\u001b[0;32m     11\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mst_dev(\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mlst\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m) = \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mresult\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m, expected = \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mexpected\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m---> 12\u001b[0m \u001b[38;5;28;01massert\u001b[39;00m \u001b[38;5;28mround\u001b[39m(result, \u001b[38;5;241m6\u001b[39m) \u001b[38;5;241m==\u001b[39m \u001b[38;5;28mround\u001b[39m(expected, \u001b[38;5;241m6\u001b[39m), \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mTest failed for \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mlst\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n",
      "\u001b[1;31mAssertionError\u001b[0m: Test failed for [10, 12, 23, 23, 16, 23, 21, 16]"
     ]
    }
   ],
   "source": [
    "\n",
    "def test_stdev(st_dev):\n",
    "    test_cases = [\n",
    "        ([10, 12, 23, 23, 16, 23, 21, 16], 4.898979485566356),  \n",
    "        ([1, 2, 3, 4, 5], 1.4142135623730951),  \n",
    "        ([10, 10, 10, 10], 0),  \n",
    "        ([3, 7, 2, 9, 5], 2.6832815729997477),  \n",
    "    ]\n",
    "    \n",
    "    for lst, expected in test_cases:\n",
    "        result = st_dev(lst)\n",
    "        print(f\"st_dev({lst}) = {result}, expected = {expected}\")\n",
    "        assert round(result, 6) == round(expected, 6), f\"Test failed for {lst}\"\n",
    "        \n",
    "test_stdev(st_dev)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 10. Write a function to check if a string is a pangram, i.e.: if it contains all the letters of the alphabet at least once. Mind that the strings may contain characters that are not letters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [],
   "source": [
    "import string\n",
    "def pangram(s):\n",
    "    alphabet = set(string.ascii_lowercase)\n",
    "    s = ''.join(filter(str.isalpha, s)).lower()\n",
    "    return set(s) >= alphabet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pangram('The quick brown fox jumps over the lazy dog') = True, expected = True\n",
      "pangram('Hello world') = False, expected = False\n",
      "pangram('Pack my box with five dozen liquor jugs') = True, expected = True\n",
      "pangram('') = False, expected = False\n"
     ]
    }
   ],
   "source": [
    "def test_pangram(pangram):\n",
    "    test_cases = [\n",
    "        (\"The quick brown fox jumps over the lazy dog\", True),  \n",
    "        (\"Hello world\", False),  # Not a pangram\n",
    "        (\"Pack my box with five dozen liquor jugs\", True),  \n",
    "        (\"\", False),  \n",
    "    ]\n",
    "    \n",
    "    for s, expected in test_cases:\n",
    "        result = pangram(s)\n",
    "        print(f\"pangram({repr(s)}) = {result}, expected = {expected}\")\n",
    "        assert result == expected, f\"Test failed for {s}\"\n",
    "\n",
    "# Run the test\n",
    "test_pangram(pangram)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 11. Write a function that receives a string of comma separated words and returns a string of comma separated words sorted alphabetically.\n",
    "\n",
    "`NOTE: You may use sorted but not split and definitely no join! 🤪`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "def sort_alpha(string):\n",
    "    words = string.split(',')\n",
    "    sorted_words = sorted(words)\n",
    "    return ','.join(sorted_words)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Input: apple,banana,orange,grape -> Sorted: apple,banana,grape,orange\n",
      "Input: dog,cat,bird -> Sorted: bird,cat,dog\n",
      "Input: zebra,apple,orange -> Sorted: apple,orange,zebra\n",
      "Input: cherry,pear,banana,apple -> Sorted: apple,banana,cherry,pear\n",
      "Input: kiwi,grape -> Sorted: grape,kiwi\n"
     ]
    }
   ],
   "source": [
    "# This will test your function \n",
    "def test_alpha(sort_alpha):\n",
    "    test_cases = [\n",
    "        \"apple,banana,orange,grape\", \n",
    "        \"dog,cat,bird\",               \n",
    "        \"zebra,apple,orange\",       \n",
    "        \"cherry,pear,banana,apple\",   \n",
    "        \"kiwi,grape\",                 \n",
    "    ]\n",
    "    \n",
    "    for test_case in test_cases:\n",
    "        print(f\"Input: {test_case} -> Sorted: {sort_alpha(test_case)}\")\n",
    "test_alpha(sort_alpha)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 12. Write a function to check if a given password is strong (at least 8 characters, at least one lower case, at least one upper case, at least one number and at least one special character). It should output True if strong and False if not."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "def check_pass(password):\n",
    "    if len(password) < 8:\n",
    "        return False\n",
    "    if not re.search(r'[a-z]', password):\n",
    "        return False\n",
    "    if not re.search(r'[A-Z]', password):\n",
    "        return False\n",
    "    if not re.search(r'[0-9]', password):\n",
    "        return False\n",
    "    if not re.search(r'[^a-zA-Z0-9]', password):\n",
    "        return False\n",
    "    return True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "def test_pass(check_pass):\n",
    "    test_cases = [\n",
    "        \"Password1!\", \n",
    "        \"password\",     \n",
    "        \"PASSWORD123\",  \n",
    "        \"12345678\",     \n",
    "        \"P@ssw0rd\",    \n",
    "        \"short\",     \n",
    "    ]\n",
    "    for password in test_cases:\n",
    "        print(f\"Password: {password} -> Strong: {check_pass(password)}\")     \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "False\n",
      "False\n",
      "False\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "def check_pass(password):\n",
    "    if len(password) < 8:\n",
    "        return False\n",
    "    if not re.search(r'[a-z]', password):\n",
    "        return False\n",
    "    if not re.search(r'[A-Z]', password):\n",
    "        return False\n",
    "    if not re.search(r'[0-9]', password):\n",
    "        return False\n",
    "    if not re.search(r'[^a-zA-Z0-9]', password):\n",
    "        return False\n",
    "    return True \n",
    "print(check_pass(\"Password123!\")) \n",
    "print(check_pass(\"password\"))      \n",
    "print(check_pass(\"PASSWORD123\"))   \n",
    "print(check_pass(\"12345\"))         \n",
    "print(check_pass(\"P@ssw0rd\"))   \n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  },
  "vscode": {
   "interpreter": {
    "hash": "aee8b7b246df8f9039afb4144a1f6fd8d2ca17a180786b69acc140d282b71a49"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
